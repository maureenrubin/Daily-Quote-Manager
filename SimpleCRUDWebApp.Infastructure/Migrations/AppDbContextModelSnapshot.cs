// <auto-generated />
using System;
using DailyQuoteManager.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DailyQuoteManager.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DailyQuoteManager.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("AppUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppUserId");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("DailyQuoteManager.Domain.Entities.DailyQuote", b =>
                {
                    b.Property<Guid>("DailyQuoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateShown")
                        .HasColumnType("date");

                    b.Property<Guid>("QuoteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DailyQuoteId");

                    b.HasIndex("QuoteId");

                    b.HasIndex("UserId", "DateShown")
                        .IsUnique();

                    b.ToTable("DailyQuotes");
                });

            modelBuilder.Entity("DailyQuoteManager.Domain.Entities.FavoriteQuote", b =>
                {
                    b.Property<Guid>("FavoriteQuoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuoteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FavoriteQuoteId");

                    b.HasIndex("QuoteId");

                    b.HasIndex("UserId", "QuoteId")
                        .IsUnique();

                    b.ToTable("FavoriteQuotes");
                });

            modelBuilder.Entity("DailyQuoteManager.Domain.Entities.Quotes", b =>
                {
                    b.Property<Guid>("QuoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("QuoteId");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("Category");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("DailyQuoteManager.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TokenId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DailyQuoteManager.Domain.Entities.DailyQuote", b =>
                {
                    b.HasOne("DailyQuoteManager.Domain.Entities.Quotes", "Quote")
                        .WithMany("DailyQuotes")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DailyQuoteManager.Domain.Entities.ApplicationUser", "User")
                        .WithMany("DailyQuotes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quote");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DailyQuoteManager.Domain.Entities.FavoriteQuote", b =>
                {
                    b.HasOne("DailyQuoteManager.Domain.Entities.Quotes", "Quote")
                        .WithMany("FavoritedByUsers")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DailyQuoteManager.Domain.Entities.ApplicationUser", "User")
                        .WithMany("FavoriteQuotes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quote");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DailyQuoteManager.Domain.Entities.Quotes", b =>
                {
                    b.HasOne("DailyQuoteManager.Domain.Entities.ApplicationUser", "AddedByUser")
                        .WithMany("AddedQuotes")
                        .HasForeignKey("AddedByUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("DailyQuoteManager.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("DailyQuoteManager.Domain.Entities.ApplicationUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DailyQuoteManager.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("AddedQuotes");

                    b.Navigation("DailyQuotes");

                    b.Navigation("FavoriteQuotes");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("DailyQuoteManager.Domain.Entities.Quotes", b =>
                {
                    b.Navigation("DailyQuotes");

                    b.Navigation("FavoritedByUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
